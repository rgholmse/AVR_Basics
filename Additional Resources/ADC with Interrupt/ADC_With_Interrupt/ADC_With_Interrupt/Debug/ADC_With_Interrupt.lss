
ADC_With_Interrupt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00804000  00000272  00000306  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000272  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00804002  00804002  00000308  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000308  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000338  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  00000378  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003ca5  00000000  00000000  000003a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000310f  00000000  00000000  0000404d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003e9  00000000  00000000  0000715c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000074  00000000  00000000  00007548  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002061  00000000  00000000  000075bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000009f  00000000  00000000  0000961d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  000096bc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__ctors_end>
   4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
   8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
   c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  14:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  18:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  30:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__vector_12>
  34:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  3c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  44:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  48:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  50:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  54:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  5c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  60:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__vector_24>
  64:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  74:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  7c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  80:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  84:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  8c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  90:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  cc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  e4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e8 <__ctors_end>:
  e8:	11 24       	eor	r1, r1
  ea:	1f be       	out	0x3f, r1	; 63
  ec:	cf ef       	ldi	r28, 0xFF	; 255
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	df e7       	ldi	r29, 0x7F	; 127
  f2:	de bf       	out	0x3e, r29	; 62

000000f4 <__do_copy_data>:
  f4:	10 e4       	ldi	r17, 0x40	; 64
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b0 e4       	ldi	r27, 0x40	; 64
  fa:	e2 e7       	ldi	r30, 0x72	; 114
  fc:	f2 e0       	ldi	r31, 0x02	; 2
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a2 30       	cpi	r26, 0x02	; 2
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	20 e4       	ldi	r18, 0x40	; 64
 110:	a2 e0       	ldi	r26, 0x02	; 2
 112:	b0 e4       	ldi	r27, 0x40	; 64
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a8 30       	cpi	r26, 0x08	; 8
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	0e 94 95 00 	call	0x12a	; 0x12a <main>
 122:	0c 94 37 01 	jmp	0x26e	; 0x26e <_exit>

00000126 <__bad_interrupt>:
 126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <main>:


int main(void)
{
	// Set F_CPU to 24 MHz
	CCP = CCP_IOREG_gc;
 12a:	88 ed       	ldi	r24, 0xD8	; 216
 12c:	84 bf       	out	0x34, r24	; 52
	CLKCTRL.OSCHFCTRLA	= CLKCTRL_FRQSEL_24M_gc;
 12e:	84 e2       	ldi	r24, 0x24	; 36
 130:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
	
	/*
		Setup TCB0 for periodic interrupt every 1 / (ADC_CHANNEL_SAMPLE_RATE * NUMBER_OF_ADC_CHANNELS) 
		such that every channel is sampled with sample rate ADC_CHANNEL_SAMPLE_RATE
	*/
	TCB0.CCMP			= (uint16_t)( ((float)F_CPU) / ((float)ADC_CHANNEL_SAMPLE_RATE * (float)NUMBER_OF_ADC_CHANNELS) );
 134:	e0 e0       	ldi	r30, 0x00	; 0
 136:	fb e0       	ldi	r31, 0x0B	; 11
 138:	80 ee       	ldi	r24, 0xE0	; 224
 13a:	9e e2       	ldi	r25, 0x2E	; 46
 13c:	84 87       	std	Z+12, r24	; 0x0c
 13e:	95 87       	std	Z+13, r25	; 0x0d
	TCB0.INTCTRL		= TCB_CAPT_bm;			// Enable interrupt
 140:	81 e0       	ldi	r24, 0x01	; 1
 142:	85 83       	std	Z+5, r24	; 0x05
	TCB0.CTRLB			= TCB_CNTMODE_INT_gc;	// Periodic interrupt mode
 144:	11 82       	std	Z+1, r1	; 0x01
	TCB0.CTRLA			= TCB_CLKSEL_DIV1_gc	// Prescaler = DIV1
						| TCB_ENABLE_bm;
 146:	80 83       	st	Z, r24
	
	/*
		Setup ADC0 for use with interrupts
	*/
	VREF.ADC0REF		= VREF_REFSEL_2V048_gc;			// Internal reference of 2.048 V selected. Optionally: VREF_REFSEL_VDD_gc
 148:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
	ADC0.MUXPOS			= adc_channel[adc_index];		// Select first channel
 14c:	e0 91 02 40 	lds	r30, 0x4002	; 0x804002 <__data_end>
 150:	f0 e0       	ldi	r31, 0x00	; 0
 152:	e0 50       	subi	r30, 0x00	; 0
 154:	f0 4c       	sbci	r31, 0xC0	; 192
 156:	90 81       	ld	r25, Z
 158:	e0 e0       	ldi	r30, 0x00	; 0
 15a:	f6 e0       	ldi	r31, 0x06	; 6
 15c:	90 87       	std	Z+8, r25	; 0x08
	ADC0.INTCTRL		= ADC_RESRDY_bm;				// Enable interrupt on result ready
 15e:	84 87       	std	Z+12, r24	; 0x0c
	ADC0.CTRLC			= ADC_PRESC_DIV12_gc;			// F_CPU / 12 = 2 MHz (Max ADC clock frequency)
 160:	93 e0       	ldi	r25, 0x03	; 3
 162:	92 83       	std	Z+2, r25	; 0x02
	ADC0.CTRLA			= ADC_RESSEL_12BIT_gc			// Ensure ADC is in 12 bit mode
						| ADC_CONVMODE_SINGLEENDED_gc	// Ensure ADC is in single-ended measurement mode
						| ADC_ENABLE_bm;
 164:	80 83       	st	Z, r24
	/*
		Disable input buffer on analog inputs and ensure that they are inputs. The input buffer can
		add switching noise to the ADC measurement
	*/
	PORTD.DIRCLR		= PIN6_bm						// AIN6
						| PIN7_bm;						// AIN7
 166:	e0 e6       	ldi	r30, 0x60	; 96
 168:	f4 e0       	ldi	r31, 0x04	; 4
 16a:	80 ec       	ldi	r24, 0xC0	; 192
 16c:	82 83       	std	Z+2, r24	; 0x02
	PORTD.PIN6CTRL		= PORT_ISC_INPUT_DISABLE_gc;	// Disable input buffers to avoid switching noise
 16e:	84 e0       	ldi	r24, 0x04	; 4
 170:	86 8b       	std	Z+22, r24	; 0x16
	PORTD.PIN7CTRL		= PORT_ISC_INPUT_DISABLE_gc;
 172:	87 8b       	std	Z+23, r24	; 0x17
	
	// Built-in LED as output (PC6 of curiosity nano)
	PORTC.DIRSET		= PIN6_bm;
 174:	80 e4       	ldi	r24, 0x40	; 64
 176:	80 93 41 04 	sts	0x0441, r24	; 0x800441 <__TEXT_REGION_LENGTH__+0x7e0441>
	
	
	// Enable global interrupts
	sei();
 17a:	78 94       	sei
	
    while (1) 
    {
		// Check if ADC result is ready (non-blocking)
		if (adc_flag)
 17c:	80 91 03 40 	lds	r24, 0x4003	; 0x804003 <adc_flag>
 180:	88 23       	and	r24, r24
 182:	e1 f3       	breq	.-8      	; 0x17c <main+0x52>
		{
			adc_flag--; // Remove 1 inserted in interrupt
 184:	80 91 03 40 	lds	r24, 0x4003	; 0x804003 <adc_flag>
 188:	81 50       	subi	r24, 0x01	; 1
 18a:	80 93 03 40 	sts	0x4003, r24	; 0x804003 <adc_flag>
			
			// Dependent on which results is read
			switch(adc_flag)
 18e:	80 91 03 40 	lds	r24, 0x4003	; 0x804003 <adc_flag>
 192:	86 30       	cpi	r24, 0x06	; 6
 194:	19 f0       	breq	.+6      	; 0x19c <main+0x72>
 196:	87 30       	cpi	r24, 0x07	; 7
 198:	91 f0       	breq	.+36     	; 0x1be <main+0x94>
 19a:	0f c0       	rjmp	.+30     	; 0x1ba <main+0x90>
			{
				case ADC_MUXPOS_AIN6_gc:
				// Dummy function, if below half of reference turn on LED
				if (adc_results[0] < 2048)
 19c:	80 91 04 40 	lds	r24, 0x4004	; 0x804004 <adc_results>
 1a0:	90 91 05 40 	lds	r25, 0x4005	; 0x804005 <adc_results+0x1>
 1a4:	81 15       	cp	r24, r1
 1a6:	98 40       	sbci	r25, 0x08	; 8
 1a8:	20 f4       	brcc	.+8      	; 0x1b2 <main+0x88>
				{
					PORTC.OUTCLR = PIN6_bm;
 1aa:	80 e4       	ldi	r24, 0x40	; 64
 1ac:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <__TEXT_REGION_LENGTH__+0x7e0446>
 1b0:	06 c0       	rjmp	.+12     	; 0x1be <main+0x94>
				}
				else
				{
					PORTC.OUTSET = PIN6_bm;
 1b2:	80 e4       	ldi	r24, 0x40	; 64
 1b4:	80 93 45 04 	sts	0x0445, r24	; 0x800445 <__TEXT_REGION_LENGTH__+0x7e0445>
 1b8:	02 c0       	rjmp	.+4      	; 0x1be <main+0x94>
				break;
				
				
				// Illegal state, reset channel index
				default:
					adc_index = 0;
 1ba:	10 92 02 40 	sts	0x4002, r1	; 0x804002 <__data_end>
					break;
			}
			
			// Clear software flag
			adc_flag = 0;
 1be:	10 92 03 40 	sts	0x4003, r1	; 0x804003 <adc_flag>
 1c2:	dc cf       	rjmp	.-72     	; 0x17c <main+0x52>

000001c4 <__vector_12>:
    }
}


ISR(TCB0_INT_vect)
{
 1c4:	1f 92       	push	r1
 1c6:	0f 92       	push	r0
 1c8:	0f b6       	in	r0, 0x3f	; 63
 1ca:	0f 92       	push	r0
 1cc:	11 24       	eor	r1, r1
 1ce:	8f 93       	push	r24
	// Clear interrupt flag
	TCB0.INTFLAGS = TCB_CAPT_bm;
 1d0:	81 e0       	ldi	r24, 0x01	; 1
 1d2:	80 93 06 0b 	sts	0x0B06, r24	; 0x800b06 <__TEXT_REGION_LENGTH__+0x7e0b06>
	
	// Start conversion
	ADC0.COMMAND = ADC_STCONV_bm;
 1d6:	80 93 0a 06 	sts	0x060A, r24	; 0x80060a <__TEXT_REGION_LENGTH__+0x7e060a>
}
 1da:	8f 91       	pop	r24
 1dc:	0f 90       	pop	r0
 1de:	0f be       	out	0x3f, r0	; 63
 1e0:	0f 90       	pop	r0
 1e2:	1f 90       	pop	r1
 1e4:	18 95       	reti

000001e6 <__vector_24>:

ISR(ADC0_RESRDY_vect)
{
 1e6:	1f 92       	push	r1
 1e8:	0f 92       	push	r0
 1ea:	0f b6       	in	r0, 0x3f	; 63
 1ec:	0f 92       	push	r0
 1ee:	11 24       	eor	r1, r1
 1f0:	0b b6       	in	r0, 0x3b	; 59
 1f2:	0f 92       	push	r0
 1f4:	8f 93       	push	r24
 1f6:	9f 93       	push	r25
 1f8:	ef 93       	push	r30
 1fa:	ff 93       	push	r31
	// Interrupt flag is cleared by hardware once RES is read (unique)
	adc_results[adc_index] = ADC0.RES;		// Store ADC result in global buffer
 1fc:	e0 91 02 40 	lds	r30, 0x4002	; 0x804002 <__data_end>
 200:	f0 e0       	ldi	r31, 0x00	; 0
 202:	80 91 10 06 	lds	r24, 0x0610	; 0x800610 <__TEXT_REGION_LENGTH__+0x7e0610>
 206:	90 91 11 06 	lds	r25, 0x0611	; 0x800611 <__TEXT_REGION_LENGTH__+0x7e0611>
 20a:	ee 0f       	add	r30, r30
 20c:	ff 1f       	adc	r31, r31
 20e:	ec 5f       	subi	r30, 0xFC	; 252
 210:	ff 4b       	sbci	r31, 0xBF	; 191
 212:	80 83       	st	Z, r24
 214:	91 83       	std	Z+1, r25	; 0x01
	adc_flag = adc_channel[adc_index];		// Doesn't protect unread flags!
 216:	e0 91 02 40 	lds	r30, 0x4002	; 0x804002 <__data_end>
 21a:	f0 e0       	ldi	r31, 0x00	; 0
 21c:	e0 50       	subi	r30, 0x00	; 0
 21e:	f0 4c       	sbci	r31, 0xC0	; 192
 220:	80 81       	ld	r24, Z
 222:	80 93 03 40 	sts	0x4003, r24	; 0x804003 <adc_flag>
	adc_flag++;								// Add 1 in case AIN0 was used (0x00)
 226:	80 91 03 40 	lds	r24, 0x4003	; 0x804003 <adc_flag>
 22a:	8f 5f       	subi	r24, 0xFF	; 255
 22c:	80 93 03 40 	sts	0x4003, r24	; 0x804003 <adc_flag>
	
	// Next channel logic
	if (adc_index < NUMBER_OF_ADC_CHANNELS-1)
 230:	80 91 02 40 	lds	r24, 0x4002	; 0x804002 <__data_end>
 234:	81 11       	cpse	r24, r1
 236:	06 c0       	rjmp	.+12     	; 0x244 <__EEPROM_REGION_LENGTH__+0x44>
	{
		adc_index++;
 238:	80 91 02 40 	lds	r24, 0x4002	; 0x804002 <__data_end>
 23c:	8f 5f       	subi	r24, 0xFF	; 255
 23e:	80 93 02 40 	sts	0x4002, r24	; 0x804002 <__data_end>
 242:	02 c0       	rjmp	.+4      	; 0x248 <__EEPROM_REGION_LENGTH__+0x48>
	}
	else
	{
		adc_index = 0;
 244:	10 92 02 40 	sts	0x4002, r1	; 0x804002 <__data_end>
	}
	
	// Set ADC MUXPOS (ADC channel) for next measurement
	ADC0.MUXPOS = adc_channel[adc_index];
 248:	e0 91 02 40 	lds	r30, 0x4002	; 0x804002 <__data_end>
 24c:	f0 e0       	ldi	r31, 0x00	; 0
 24e:	e0 50       	subi	r30, 0x00	; 0
 250:	f0 4c       	sbci	r31, 0xC0	; 192
 252:	80 81       	ld	r24, Z
 254:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <__TEXT_REGION_LENGTH__+0x7e0608>
}
 258:	ff 91       	pop	r31
 25a:	ef 91       	pop	r30
 25c:	9f 91       	pop	r25
 25e:	8f 91       	pop	r24
 260:	0f 90       	pop	r0
 262:	0b be       	out	0x3b, r0	; 59
 264:	0f 90       	pop	r0
 266:	0f be       	out	0x3f, r0	; 63
 268:	0f 90       	pop	r0
 26a:	1f 90       	pop	r1
 26c:	18 95       	reti

0000026e <_exit>:
 26e:	f8 94       	cli

00000270 <__stop_program>:
 270:	ff cf       	rjmp	.-2      	; 0x270 <__stop_program>
