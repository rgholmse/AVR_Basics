
ADCSelSampRateEvsys.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00804000  00804000  00000236  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001c2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00804000  00804000  00000236  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000236  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000268  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  000002a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000417d  00000000  00000000  000002d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000310f  00000000  00000000  0000444d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000396  00000000  00000000  0000755c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000048  00000000  00000000  000078f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002abb  00000000  00000000  0000793c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000049  00000000  00000000  0000a3f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  0000a440  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__ctors_end>
   4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
   8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
   c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  10:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  14:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  18:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  1c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  20:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  24:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  28:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  2c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  30:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  34:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  38:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  3c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  40:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  44:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  48:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  4c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  50:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  54:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  58:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  5c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  60:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__vector_24>
  64:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  68:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  6c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  70:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  74:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  78:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  7c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  80:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  84:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  88:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  8c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  90:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  94:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  98:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  9c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  a0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  a4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  a8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  ac:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  b0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  b4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  b8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  bc:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  c0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  c4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  c8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  cc:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  d0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  d4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  d8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  dc:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  e0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  e4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>

000000e8 <__ctors_end>:
  e8:	11 24       	eor	r1, r1
  ea:	1f be       	out	0x3f, r1	; 63
  ec:	cf ef       	ldi	r28, 0xFF	; 255
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	df e7       	ldi	r29, 0x7F	; 127
  f2:	de bf       	out	0x3e, r29	; 62

000000f4 <__do_clear_bss>:
  f4:	20 e4       	ldi	r18, 0x40	; 64
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b0 e4       	ldi	r27, 0x40	; 64
  fa:	01 c0       	rjmp	.+2      	; 0xfe <.do_clear_bss_start>

000000fc <.do_clear_bss_loop>:
  fc:	1d 92       	st	X+, r1

000000fe <.do_clear_bss_start>:
  fe:	a3 30       	cpi	r26, 0x03	; 3
 100:	b2 07       	cpc	r27, r18
 102:	e1 f7       	brne	.-8      	; 0xfc <.do_clear_bss_loop>
 104:	0e 94 88 00 	call	0x110	; 0x110 <main>
 108:	0c 94 df 00 	jmp	0x1be	; 0x1be <_exit>

0000010c <__bad_interrupt>:
 10c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000110 <main>:
int main(void)
{
	/*
		Set F_CPU to 24 MHz
	*/
	CCP = CCP_IOREG_gc;									// Unlock protected registers
 110:	88 ed       	ldi	r24, 0xD8	; 216
 112:	84 bf       	out	0x34, r24	; 52
	CLKCTRL.OSCHFCTRLA	= CLKCTRL_FRQSEL_24M_gc;		// Change OSCHF frequency to 24 MHz
 114:	84 e2       	ldi	r24, 0x24	; 36
 116:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
	
	/*
		Setup GPIO
	*/
	ADC0.MUXPOS			= ADC_MUXPOS_AIN7_gc;			// Connect ADC to AIN7 (PD7)
 11a:	e0 e0       	ldi	r30, 0x00	; 0
 11c:	f6 e0       	ldi	r31, 0x06	; 6
 11e:	87 e0       	ldi	r24, 0x07	; 7
 120:	80 87       	std	Z+8, r24	; 0x08
	PORTD.DIRCLR		= PIN7_bm;						// Make sure PD7 is an input
 122:	80 e8       	ldi	r24, 0x80	; 128
 124:	80 93 62 04 	sts	0x0462, r24	; 0x800462 <__TEXT_REGION_LENGTH__+0x7e0462>
	PORTC.DIRSET		= PIN6_bm;						// Make PC6 an output (LED)
 128:	80 e4       	ldi	r24, 0x40	; 64
 12a:	80 93 41 04 	sts	0x0441, r24	; 0x800441 <__TEXT_REGION_LENGTH__+0x7e0441>
	
	/*
		Setup TCB0 with periodic interrupt - Do not enable periodic interrupt as the event system will be
		used to start ADC conversions in hardware instead
	*/
	TCB0.CCMP			= (uint16_t)( ((float)F_CPU) / ((float)ADC_SAMP_RATE) - 0.5 );	// Calculate TOP value
 12e:	a0 e0       	ldi	r26, 0x00	; 0
 130:	bb e0       	ldi	r27, 0x0B	; 11
 132:	8f eb       	ldi	r24, 0xBF	; 191
 134:	9d e5       	ldi	r25, 0x5D	; 93
 136:	1c 96       	adiw	r26, 0x0c	; 12
 138:	8d 93       	st	X+, r24
 13a:	9c 93       	st	X, r25
 13c:	1d 97       	sbiw	r26, 0x0d	; 13
	TCB0.CTRLB			= TCB_CNTMODE_INT_gc;			// Periodic interrupt mode
 13e:	11 96       	adiw	r26, 0x01	; 1
 140:	1c 92       	st	X, r1
 142:	11 97       	sbiw	r26, 0x01	; 1
	TCB0.CTRLA			= TCB_CLKSEL_DIV1_gc			// Prescaler = DIV1
						| TCB_ENABLE_bm;
 144:	81 e0       	ldi	r24, 0x01	; 1
 146:	8c 93       	st	X, r24
	
	/*
		Setup ADC0 such that a new conversion is started on TCB0 event (periodic event)
	*/
	VREF.ADC0REF		= VREF_REFSEL_2V048_gc;			// Select ADC reference - Internal 2.048 V reference used
 148:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
	ADC0.EVCTRL			= ADC_STARTEI_bm;				// Enable conversion start on event
 14c:	83 87       	std	Z+11, r24	; 0x0b
	ADC0.INTCTRL		= ADC_RESRDY_bm;				// Enable result ready interrupt
 14e:	84 87       	std	Z+12, r24	; 0x0c
	ADC0.CTRLC			= ADC_PRESC_DIV12_gc;			// F_CPU / 12 = 2 MHz (Max ADC clock frequency)
 150:	93 e0       	ldi	r25, 0x03	; 3
 152:	92 83       	std	Z+2, r25	; 0x02
	ADC0.CTRLA			= ADC_RESSEL_12BIT_gc			// ADC in 12 bit mode
						| ADC_CONVMODE_SINGLEENDED_gc	// ADC in single ended mode (Only MUXPOS used)
						| ADC_ENABLE_bm;
 154:	80 83       	st	Z, r24
	
	/*
		Connect TCB0 and ADC0 in the event system
	*/
	EVSYS.CHANNEL0		= EVSYS_CHANNEL0_TCB0_CAPT_gc;	// Event system channel 0 generator is TCB0 CAPT event
 156:	e0 e0       	ldi	r30, 0x00	; 0
 158:	f2 e0       	ldi	r31, 0x02	; 2
 15a:	90 ea       	ldi	r25, 0xA0	; 160
 15c:	90 8b       	std	Z+16, r25	; 0x10
	EVSYS.USERADC0START	= EVSYS_USER_CHANNEL0_gc;		// Connect ADC0START input to channel 0 (TCB0 CAPT)
 15e:	84 a7       	std	Z+44, r24	; 0x2c
	
	
	// Enable global interrupts
	sei();
 160:	78 94       	sei
	
    while (1) 
    {
		// Check if ADC measurement is complete (non-blocking)
		if (adc_flag)
 162:	80 91 02 40 	lds	r24, 0x4002	; 0x804002 <adc_flag>
 166:	88 23       	and	r24, r24
 168:	e1 f3       	breq	.-8      	; 0x162 <main+0x52>
		{
			adc_flag = 0;
 16a:	10 92 02 40 	sts	0x4002, r1	; 0x804002 <adc_flag>
			
			// Do something with ADC result - Example LED control
			if (adc_res < 2048)
 16e:	80 91 00 40 	lds	r24, 0x4000	; 0x804000 <__DATA_REGION_ORIGIN__>
 172:	90 91 01 40 	lds	r25, 0x4001	; 0x804001 <__DATA_REGION_ORIGIN__+0x1>
 176:	81 15       	cp	r24, r1
 178:	98 40       	sbci	r25, 0x08	; 8
 17a:	20 f4       	brcc	.+8      	; 0x184 <main+0x74>
			{
				// LED ON
				PORTC.OUTCLR = PIN6_bm;
 17c:	80 e4       	ldi	r24, 0x40	; 64
 17e:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <__TEXT_REGION_LENGTH__+0x7e0446>
 182:	ef cf       	rjmp	.-34     	; 0x162 <main+0x52>
			}
			else
			{
				// LED OFF
				PORTC.OUTSET = PIN6_bm;
 184:	80 e4       	ldi	r24, 0x40	; 64
 186:	80 93 45 04 	sts	0x0445, r24	; 0x800445 <__TEXT_REGION_LENGTH__+0x7e0445>
 18a:	eb cf       	rjmp	.-42     	; 0x162 <main+0x52>

0000018c <__vector_24>:
    }
}


ISR(ADC0_RESRDY_vect)
{
 18c:	1f 92       	push	r1
 18e:	0f 92       	push	r0
 190:	0f b6       	in	r0, 0x3f	; 63
 192:	0f 92       	push	r0
 194:	11 24       	eor	r1, r1
 196:	8f 93       	push	r24
 198:	9f 93       	push	r25
	// Interrupt flag is cleared when reading RES (unique)
	adc_res = ADC0.RES;
 19a:	80 91 10 06 	lds	r24, 0x0610	; 0x800610 <__TEXT_REGION_LENGTH__+0x7e0610>
 19e:	90 91 11 06 	lds	r25, 0x0611	; 0x800611 <__TEXT_REGION_LENGTH__+0x7e0611>
 1a2:	80 93 00 40 	sts	0x4000, r24	; 0x804000 <__DATA_REGION_ORIGIN__>
 1a6:	90 93 01 40 	sts	0x4001, r25	; 0x804001 <__DATA_REGION_ORIGIN__+0x1>
	
	adc_flag = 1;
 1aa:	81 e0       	ldi	r24, 0x01	; 1
 1ac:	80 93 02 40 	sts	0x4002, r24	; 0x804002 <adc_flag>
}
 1b0:	9f 91       	pop	r25
 1b2:	8f 91       	pop	r24
 1b4:	0f 90       	pop	r0
 1b6:	0f be       	out	0x3f, r0	; 63
 1b8:	0f 90       	pop	r0
 1ba:	1f 90       	pop	r1
 1bc:	18 95       	reti

000001be <_exit>:
 1be:	f8 94       	cli

000001c0 <__stop_program>:
 1c0:	ff cf       	rjmp	.-2      	; 0x1c0 <__stop_program>
