
Part 4 Solution PWM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00804000  00804000  000001de  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000018a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001de  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000210  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000250  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00003ccc  00000000  00000000  00000280  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000031a6  00000000  00000000  00003f4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003fc  00000000  00000000  000070f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  000074f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00001bf8  00000000  00000000  00007534  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000ae  00000000  00000000  0000912c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  000091da  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__ctors_end>
   4:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
   8:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
   c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  10:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  14:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  18:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  1c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  20:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  24:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  28:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  2c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  30:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  34:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  38:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  3c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  40:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  44:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  48:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  4c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  50:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  54:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  58:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  5c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  60:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  64:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  68:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  6c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  70:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  74:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  78:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  7c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  80:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  84:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  88:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  8c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  90:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  94:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  98:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  9c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  a0:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  a4:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  a8:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  ac:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  b0:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  b4:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  b8:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  bc:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  c0:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  c4:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  c8:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  cc:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  d0:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  d4:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  d8:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  dc:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  e0:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  e4:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>

000000e8 <__ctors_end>:
  e8:	11 24       	eor	r1, r1
  ea:	1f be       	out	0x3f, r1	; 63
  ec:	cf ef       	ldi	r28, 0xFF	; 255
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	df e7       	ldi	r29, 0x7F	; 127
  f2:	de bf       	out	0x3e, r29	; 62
  f4:	0e 94 99 00 	call	0x132	; 0x132 <main>
  f8:	0c 94 c3 00 	jmp	0x186	; 0x186 <_exit>

000000fc <__bad_interrupt>:
  fc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000100 <_Z9servo_seth>:
#include <util/delay.h>

void servo_set(uint8_t duty_cycle)
{
	// Optional guard
	if (duty_cycle > 100)
 100:	85 36       	cpi	r24, 0x65	; 101
 102:	08 f0       	brcs	.+2      	; 0x106 <_Z9servo_seth+0x6>
	{
		duty_cycle = 100;
 104:	84 e6       	ldi	r24, 0x64	; 100
	}
	
	// Calculate compare value
	uint16_t cmp = duty_cycle * 40 + 1000;
 106:	28 e2       	ldi	r18, 0x28	; 40
 108:	82 9f       	mul	r24, r18
 10a:	c0 01       	movw	r24, r0
 10c:	11 24       	eor	r1, r1
 10e:	88 51       	subi	r24, 0x18	; 24
 110:	9c 4f       	sbci	r25, 0xFC	; 252
	
	// Update CMPxBUF register. CMPx register us updated by buffer on overflow
	// This ensures that the pulse on time is always valid
	TCA0.SINGLE.CMP0BUF = cmp;
 112:	80 93 38 0a 	sts	0x0A38, r24	; 0x800a38 <__TEXT_REGION_LENGTH__+0x7e0a38>
 116:	90 93 39 0a 	sts	0x0A39, r25	; 0x800a39 <__TEXT_REGION_LENGTH__+0x7e0a39>
 11a:	08 95       	ret

0000011c <_Z11servo_setupv>:
void servo_setup()
{
	#define TCA_CLKDIV 2
	#define TCA_FREQ 50.0
	// Calculate TOP value for TCA
	TCA0.SINGLE.PER		= (uint16_t)(  (((float)F_CPU) / ((float)TCA_CLKDIV))  / TCA_FREQ - 0.5  );
 11c:	e0 e0       	ldi	r30, 0x00	; 0
 11e:	fa e0       	ldi	r31, 0x0A	; 10
 120:	8f e3       	ldi	r24, 0x3F	; 63
 122:	9c e9       	ldi	r25, 0x9C	; 156
 124:	86 a3       	std	Z+38, r24	; 0x26
 126:	97 a3       	std	Z+39, r25	; 0x27
	
	TCA0.SINGLE.CTRLB	= TCA_SINGLE_CMP0EN_bm				// Enable pin override on CMP0 - WO0 - PD0
						| TCA_SINGLE_WGMODE_SINGLESLOPE_gc;	// TCA0 in PWM mode (Single slope)
 128:	83 e1       	ldi	r24, 0x13	; 19
 12a:	81 83       	std	Z+1, r24	; 0x01
	
	TCA0.SINGLE.CTRLA	= TCA_SINGLE_CLKSEL_DIV2_gc			// Set F_TCA = F_CPU/2
						| TCA_SINGLE_ENABLE_bm;
 12c:	83 e0       	ldi	r24, 0x03	; 3
 12e:	80 83       	st	Z, r24
 130:	08 95       	ret

00000132 <main>:
}

int main(void)
{
	PORTA.DIRSET	= PIN0_bm;
 132:	81 e0       	ldi	r24, 0x01	; 1
 134:	80 93 01 04 	sts	0x0401, r24	; 0x800401 <__TEXT_REGION_LENGTH__+0x7e0401>
	
	servo_setup();
 138:	0e 94 8e 00 	call	0x11c	; 0x11c <_Z11servo_setupv>
	   
    while (1) 
    {
		servo_set(0);	// Servo 0%
 13c:	80 e0       	ldi	r24, 0x00	; 0
 13e:	0e 94 80 00 	call	0x100	; 0x100 <_Z9servo_seth>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 142:	2f e7       	ldi	r18, 0x7F	; 127
 144:	8a e1       	ldi	r24, 0x1A	; 26
 146:	96 e0       	ldi	r25, 0x06	; 6
 148:	21 50       	subi	r18, 0x01	; 1
 14a:	80 40       	sbci	r24, 0x00	; 0
 14c:	90 40       	sbci	r25, 0x00	; 0
 14e:	e1 f7       	brne	.-8      	; 0x148 <main+0x16>
 150:	00 c0       	rjmp	.+0      	; 0x152 <main+0x20>
 152:	00 00       	nop
		_delay_ms(500);
		
		servo_set(50);	// Servo 50%
 154:	82 e3       	ldi	r24, 0x32	; 50
 156:	0e 94 80 00 	call	0x100	; 0x100 <_Z9servo_seth>
 15a:	2f e7       	ldi	r18, 0x7F	; 127
 15c:	8a e1       	ldi	r24, 0x1A	; 26
 15e:	96 e0       	ldi	r25, 0x06	; 6
 160:	21 50       	subi	r18, 0x01	; 1
 162:	80 40       	sbci	r24, 0x00	; 0
 164:	90 40       	sbci	r25, 0x00	; 0
 166:	e1 f7       	brne	.-8      	; 0x160 <main+0x2e>
 168:	00 c0       	rjmp	.+0      	; 0x16a <main+0x38>
 16a:	00 00       	nop
		_delay_ms(500);
		
		servo_set(100);	// Servo 100%
 16c:	84 e6       	ldi	r24, 0x64	; 100
 16e:	0e 94 80 00 	call	0x100	; 0x100 <_Z9servo_seth>
 172:	2f e7       	ldi	r18, 0x7F	; 127
 174:	8a e1       	ldi	r24, 0x1A	; 26
 176:	96 e0       	ldi	r25, 0x06	; 6
 178:	21 50       	subi	r18, 0x01	; 1
 17a:	80 40       	sbci	r24, 0x00	; 0
 17c:	90 40       	sbci	r25, 0x00	; 0
 17e:	e1 f7       	brne	.-8      	; 0x178 <main+0x46>
 180:	00 c0       	rjmp	.+0      	; 0x182 <main+0x50>
 182:	00 00       	nop
 184:	db cf       	rjmp	.-74     	; 0x13c <main+0xa>

00000186 <_exit>:
 186:	f8 94       	cli

00000188 <__stop_program>:
 188:	ff cf       	rjmp	.-2      	; 0x188 <__stop_program>
