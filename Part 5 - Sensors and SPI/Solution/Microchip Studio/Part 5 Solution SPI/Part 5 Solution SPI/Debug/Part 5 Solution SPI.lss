
Part 5 Solution SPI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00804000  00804000  000001cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000178  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001cc  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001fc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  0000023c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000364d  00000000  00000000  00000264  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00003106  00000000  00000000  000038b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003e3  00000000  00000000  000069b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00006d9c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00001920  00000000  00000000  00006dd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000068  00000000  00000000  000086f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00008758  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__ctors_end>
   4:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
   8:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
   c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  10:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  14:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  18:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  1c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  20:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  24:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  28:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  2c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  30:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  34:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  38:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  3c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  40:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  44:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  48:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  4c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  50:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  54:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  58:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  5c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  60:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  64:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  68:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  6c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  70:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  74:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  78:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  7c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  80:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  84:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  88:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  8c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  90:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  94:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  98:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  9c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  a0:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  a4:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  a8:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  ac:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  b0:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  b4:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  b8:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  bc:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  c0:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  c4:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  c8:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  cc:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  d0:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  d4:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  d8:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  dc:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  e0:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  e4:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>

000000e8 <__ctors_end>:
  e8:	11 24       	eor	r1, r1
  ea:	1f be       	out	0x3f, r1	; 63
  ec:	cf ef       	ldi	r28, 0xFF	; 255
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	df e7       	ldi	r29, 0x7F	; 127
  f2:	de bf       	out	0x3e, r29	; 62
  f4:	0e 94 89 00 	call	0x112	; 0x112 <main>
  f8:	0c 94 ba 00 	jmp	0x174	; 0x174 <_exit>

000000fc <__bad_interrupt>:
  fc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000100 <_Z8spi_xferh>:
#include <util/delay.h>

uint8_t spi_xfer(uint8_t data)
{
	// Start transaction
	SPI0.DATA = data;
 100:	80 93 44 09 	sts	0x0944, r24	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
	
	// Wait for transaction to complete
	while(!(SPI0.INTFLAGS & SPI_IF_bm));
 104:	80 91 43 09 	lds	r24, 0x0943	; 0x800943 <__TEXT_REGION_LENGTH__+0x7e0943>
 108:	88 23       	and	r24, r24
 10a:	e4 f7       	brge	.-8      	; 0x104 <_Z8spi_xferh+0x4>
	
	// Return received data
	return SPI0.DATA;
 10c:	80 91 44 09 	lds	r24, 0x0944	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
}
 110:	08 95       	ret

00000112 <main>:
int main(void)
{
	// Setup GPIO
	PORTA.DIRSET	= PIN4_bm	// MOSI - Master Out Slave In
					| PIN6_bm	// SCK - Serial ClocK
					| PIN7_bm;	// SS - Slave Select (active LOW)
 112:	e0 e0       	ldi	r30, 0x00	; 0
 114:	f4 e0       	ldi	r31, 0x04	; 4
 116:	80 ed       	ldi	r24, 0xD0	; 208
 118:	81 83       	std	Z+1, r24	; 0x01
	PORTA.DIRCLR	= PIN5_bm;	// MISO - Master In Slave Out
 11a:	80 e2       	ldi	r24, 0x20	; 32
 11c:	82 83       	std	Z+2, r24	; 0x02
	
	// Setup SPI
	SPI0.CTRLB		= SPI_SSD_bm		// Disable SS as input on SPI0 (Overrides master mode)
					| SPI_MODE_0_gc;	// SPI mode 0. Make sure this is _gc!
 11e:	a0 e4       	ldi	r26, 0x40	; 64
 120:	b9 e0       	ldi	r27, 0x09	; 9
 122:	84 e0       	ldi	r24, 0x04	; 4
 124:	11 96       	adiw	r26, 0x01	; 1
 126:	8c 93       	st	X, r24
 128:	11 97       	sbiw	r26, 0x01	; 1
	SPI0.CTRLA		= SPI_MASTER_bm		// Make this device SPI master
					| SPI_PRESC_DIV4_gc	// F_CPU/4 = 1 MHz. For our slave max frequency is 5 MHz
					| SPI_ENABLE_bm;
 12a:	81 e2       	ldi	r24, 0x21	; 33
 12c:	8c 93       	st	X, r24
	
	// Deselect salve
	PORTA.OUTSET	= PIN7_bm;
 12e:	80 e8       	ldi	r24, 0x80	; 128
 130:	85 83       	std	Z+5, r24	; 0x05
	
	// Make PC6 an output (LED)
	PORTC.DIRSET	= PIN6_bm;
 132:	80 e4       	ldi	r24, 0x40	; 64
 134:	80 93 41 04 	sts	0x0441, r24	; 0x800441 <__TEXT_REGION_LENGTH__+0x7e0441>
	
	uint8_t rx, tx = 0;
 138:	80 e0       	ldi	r24, 0x00	; 0
	
    while (1) 
    {
		// Select slave
		PORTA.OUTCLR = PIN7_bm;
 13a:	c0 e0       	ldi	r28, 0x00	; 0
 13c:	d4 e0       	ldi	r29, 0x04	; 4
 13e:	10 e8       	ldi	r17, 0x80	; 128
 140:	1e 83       	std	Y+6, r17	; 0x06
		
		// SPI transmit/receive
		rx = spi_xfer(tx++);
 142:	01 e0       	ldi	r16, 0x01	; 1
 144:	08 0f       	add	r16, r24
 146:	0e 94 80 00 	call	0x100	; 0x100 <_Z8spi_xferh>
		
		// De-select slave
		PORTA.OUTSET = PIN7_bm;
 14a:	1d 83       	std	Y+5, r17	; 0x05
		
		// LED == least significant bit
		if (rx & (1<<0)) {
 14c:	80 ff       	sbrs	r24, 0
 14e:	04 c0       	rjmp	.+8      	; 0x158 <main+0x46>
			// LED ON
			PORTC.OUTCLR = PIN6_bm;
 150:	80 e4       	ldi	r24, 0x40	; 64
 152:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <__TEXT_REGION_LENGTH__+0x7e0446>
 156:	03 c0       	rjmp	.+6      	; 0x15e <main+0x4c>
		}
		else {
			// LED OFF
			PORTC.OUTSET = PIN6_bm;
 158:	80 e4       	ldi	r24, 0x40	; 64
 15a:	80 93 45 04 	sts	0x0445, r24	; 0x800445 <__TEXT_REGION_LENGTH__+0x7e0445>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 15e:	2f e7       	ldi	r18, 0x7F	; 127
 160:	8a e1       	ldi	r24, 0x1A	; 26
 162:	96 e0       	ldi	r25, 0x06	; 6
 164:	21 50       	subi	r18, 0x01	; 1
 166:	80 40       	sbci	r24, 0x00	; 0
 168:	90 40       	sbci	r25, 0x00	; 0
 16a:	e1 f7       	brne	.-8      	; 0x164 <main+0x52>
 16c:	00 c0       	rjmp	.+0      	; 0x16e <main+0x5c>
 16e:	00 00       	nop
    {
		// Select slave
		PORTA.OUTCLR = PIN7_bm;
		
		// SPI transmit/receive
		rx = spi_xfer(tx++);
 170:	80 2f       	mov	r24, r16
 172:	e3 cf       	rjmp	.-58     	; 0x13a <main+0x28>

00000174 <_exit>:
 174:	f8 94       	cli

00000176 <__stop_program>:
 176:	ff cf       	rjmp	.-2      	; 0x176 <__stop_program>
